module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "NL": parse_NL,
        "S": parse_S,
        "Meta": parse_Meta,
        "Syllable": parse_Syllable,
        "Part": parse_Part,
        "Header": parse_Header,
        "Measure": parse_Measure,
        "Event": parse_Event,
        "Note": parse_Note,
        "Properties": parse_Properties,
        "Duration": parse_Duration,
        "Fermata": parse_Fermata,
        "Dot": parse_Dot,
        "Tie": parse_Tie,
        "Num": parse_Num,
        "Rest": parse_Rest,
        "Key": parse_Key,
        "Time": parse_Time,
        "Jump": parse_Jump,
        "Sustain": parse_Sustain,
        "Dynamics": parse_Dynamics,
        "Chord": parse_Chord
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Meta();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result2 = parse_Part();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_Part();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, meta, parts) {
            var ret = {
              parts: parts,
              meta: ""
            }
            if (typeof meta !== "undefined") {
              ret.meta = meta
            }
            return ret
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_NL() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        if (input.charCodeAt(pos) === 13) {
          result0 = "\r";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\r\"");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 10) {
            result1 = "\n";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\n\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("newline");
        }
        return result0;
      }
      
      function parse_S() {
        var result0;
        
        reportFailures++;
        if (/^[ \r\n\t]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\r\\n\\t]");
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("whitespace");
        }
        return result0;
      }
      
      function parse_Meta() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_S();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_S();
        }
        if (result0 !== null) {
          if (input.substr(pos, 3) === "```") {
            result1 = "```";
            pos += 3;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"```\"");
            }
          }
          if (result1 === null) {
            if (input.substr(pos, 3) === "---") {
              result1 = "---";
              pos += 3;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"---\"");
              }
            }
          }
          if (result1 !== null) {
            result2 = parse_NL();
            if (result2 !== null) {
              if (/^[^`]/.test(input.charAt(pos))) {
                result4 = input.charAt(pos);
                pos++;
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("[^`]");
                }
              }
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  if (/^[^`]/.test(input.charAt(pos))) {
                    result4 = input.charAt(pos);
                    pos++;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("[^`]");
                    }
                  }
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                if (input.substr(pos, 3) === "```") {
                  result4 = "```";
                  pos += 3;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"```\"");
                  }
                }
                if (result4 === null) {
                  if (input.substr(pos, 3) === "---") {
                    result4 = "---";
                    pos += 3;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"---\"");
                    }
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_S();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_S();
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, content) {
            return content.join("")
          })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("meta");
        }
        return result0;
      }
      
      function parse_Syllable() {
        var result0;
        
        reportFailures++;
        if (input.substr(pos, 2) === "de") {
          result0 = "de";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"de\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "do") {
            result0 = "do";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"do\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 2) === "di") {
              result0 = "di";
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"di\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 2) === "ra") {
                result0 = "ra";
                pos += 2;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"ra\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 2) === "re") {
                  result0 = "re";
                  pos += 2;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"re\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos, 2) === "ri") {
                    result0 = "ri";
                    pos += 2;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"ri\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos, 2) === "me") {
                      result0 = "me";
                      pos += 2;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"me\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos, 2) === "mi") {
                        result0 = "mi";
                        pos += 2;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"mi\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos, 2) === "fa") {
                          result0 = "fa";
                          pos += 2;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"fa\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.substr(pos, 2) === "fi") {
                            result0 = "fi";
                            pos += 2;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"fi\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos, 2) === "se") {
                              result0 = "se";
                              pos += 2;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"se\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.substr(pos, 3) === "sol") {
                                result0 = "sol";
                                pos += 3;
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"sol\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.substr(pos, 2) === "si") {
                                  result0 = "si";
                                  pos += 2;
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"si\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.substr(pos, 2) === "le") {
                                    result0 = "le";
                                    pos += 2;
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"le\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.substr(pos, 2) === "la") {
                                      result0 = "la";
                                      pos += 2;
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"la\"");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.substr(pos, 2) === "li") {
                                        result0 = "li";
                                        pos += 2;
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"li\"");
                                        }
                                      }
                                      if (result0 === null) {
                                        if (input.substr(pos, 2) === "te") {
                                          result0 = "te";
                                          pos += 2;
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"te\"");
                                          }
                                        }
                                        if (result0 === null) {
                                          if (input.substr(pos, 2) === "ti") {
                                            result0 = "ti";
                                            pos += 2;
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"ti\"");
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("syllable");
        }
        return result0;
      }
      
      function parse_Part() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Header();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_Meta();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result3 = parse_Measure();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_Measure();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_S();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_S();
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, name, meta, measures) {
            partCount++
            var ret = {}
            if (typeof name !== "undefined" && name !== "") ret.name = name
            else ret.name = "part " + partCount
            ret.measures = measures
            ret.meta = ""
            if (typeof meta !== "undefined") {
              ret.meta = meta
            }
            return ret
          })(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("part");
        }
        return result0;
      }
      
      function parse_Header() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 35) {
          result1 = "#";
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (input.charCodeAt(pos) === 35) {
              result1 = "#";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"#\"");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 32) {
            result1 = " ";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\" \"");
            }
          }
          if (result1 !== null) {
            if (/^[^\r\n]/.test(input.charAt(pos))) {
              result3 = input.charAt(pos);
              pos++;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\r\\n]");
              }
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                if (/^[^\r\n]/.test(input.charAt(pos))) {
                  result3 = input.charAt(pos);
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^\\r\\n]");
                  }
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_NL();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_S();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_S();
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, name) {
            return name.join("")
          })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("header");
        }
        return result0;
      }
      
      function parse_Measure() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        if (/^[ \t]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[ \t]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[ \\t]");
            }
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          result2 = parse_Num();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_Num();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 46) {
              result2 = ".";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 === null) {
            if (input.charCodeAt(pos) === 45) {
              result1 = "-";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"-\"");
              }
            }
          }
          if (result1 !== null) {
            result3 = parse_Event();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_Event();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_NL();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, events) {
            return events
          })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("measure");
        }
        return result0;
      }
      
      function parse_Event() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 32) {
          result0 = " ";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Time();
          if (result1 === null) {
            result1 = parse_Note();
            if (result1 === null) {
              result1 = parse_Chord();
              if (result1 === null) {
                result1 = parse_Rest();
                if (result1 === null) {
                  result1 = parse_Key();
                  if (result1 === null) {
                    result1 = parse_Jump();
                    if (result1 === null) {
                      result1 = parse_Sustain();
                      if (result1 === null) {
                        result1 = parse_Dynamics();
                      }
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = [];
            if (input.charCodeAt(pos) === 32) {
              result3 = " ";
              pos++;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\" \"");
              }
            }
            while (result3 !== null) {
              result2.push(result3);
              if (input.charCodeAt(pos) === 32) {
                result3 = " ";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\" \"");
                }
              }
            }
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos2;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, ev) {
            return ev
          })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("event");
        }
        return result0;
      }
      
      function parse_Note() {
        var result0, result1;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Syllable();
        if (result0 !== null) {
          result1 = parse_Properties();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, syllable, props) {
            var m = {
              type: "note",
              syllable: syllable
            }
            if (typeof props === "object") {
              Object.keys(props).forEach(function (k) {
                m[k] = props[k]
              })
            }
        
            return m
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("note");
        }
        return result0;
      }
      
      function parse_Properties() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 47) {
          result0 = "/";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"/\"");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result2 = parse_Duration();
          if (result2 === null) {
            result2 = parse_Fermata();
            if (result2 === null) {
              result2 = parse_Dot();
              if (result2 === null) {
                result2 = parse_Tie();
              }
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_Duration();
              if (result2 === null) {
                result2 = parse_Fermata();
                if (result2 === null) {
                  result2 = parse_Dot();
                  if (result2 === null) {
                    result2 = parse_Tie();
                  }
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, props) {
            var m = {}
            props.forEach(function (prop) {
              m[prop.name] = prop.value
            })
            return m
          })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("properties");
        }
        return result0;
      }
      
      function parse_Duration() {
        var result0;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        result0 = parse_Num();
        if (result0 !== null) {
          result0 = (function(offset, duration) {
            return { name: "duration", value: duration }
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("duration");
        }
        return result0;
      }
      
      function parse_Fermata() {
        var result0;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        if (input.charCodeAt(pos) === 95) {
          result0 = "_";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"_\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
            return { name: "fermata", value: true }
          })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("fermata");
        }
        return result0;
      }
      
      function parse_Dot() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        if (input.charCodeAt(pos) === 46) {
          result1 = ".";
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (input.charCodeAt(pos) === 46) {
              result1 = ".";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, dot) {
            return { name: "dot", value: dot.length }
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("dot");
        }
        return result0;
      }
      
      function parse_Tie() {
        var result0;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        if (input.charCodeAt(pos) === 94) {
          result0 = "^";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"^\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
            return { name: "tie", value: true }
          })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("tie");
        }
        return result0;
      }
      
      function parse_Num() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        if (input.charCodeAt(pos) === 48) {
          result1 = "0";
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\"0\"");
          }
        }
        if (result1 === null) {
          if (input.charCodeAt(pos) === 49) {
            result1 = "1";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"1\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos) === 50) {
              result1 = "2";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"2\"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos) === 51) {
                result1 = "3";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"3\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos) === 52) {
                  result1 = "4";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"4\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 53) {
                    result1 = "5";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"5\"");
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 54) {
                      result1 = "6";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"6\"");
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 55) {
                        result1 = "7";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"7\"");
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 56) {
                          result1 = "8";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"8\"");
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 57) {
                            result1 = "9";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"9\"");
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos) === 49) {
                result1 = "1";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"1\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos) === 50) {
                  result1 = "2";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"2\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 51) {
                    result1 = "3";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"3\"");
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 52) {
                      result1 = "4";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"4\"");
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 53) {
                        result1 = "5";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"5\"");
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 54) {
                          result1 = "6";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"6\"");
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 55) {
                            result1 = "7";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"7\"");
                            }
                          }
                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 56) {
                              result1 = "8";
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"8\"");
                              }
                            }
                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 57) {
                                result1 = "9";
                                pos++;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"9\"");
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, digit) {
            return parseInt(digit.join(""), 10)
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("number");
        }
        return result0;
      }
      
      function parse_Rest() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 45) {
          result0 = "-";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-\"");
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 47) {
            result1 = "/";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_Num();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, duration) {
            var m = {
              type: "rest"
            }
            if (typeof duration !== "undefined") {
              m.duration = parseInt(duration, 10)
            }
            return m
          })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("rest");
        }
        return result0;
      }
      
      function parse_Key() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 40) {
          result0 = "(";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Syllable();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 41) {
              result2 = ")";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\")\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, syllable) {
            return {
              type: "key",
              syllable: syllable
            }
          })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("key signature");
        }
        return result0;
      }
      
      function parse_Time() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 40) {
          result0 = "(";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Num();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 47) {
              result2 = "/";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"/\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_Num();
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 41) {
                  result4 = ")";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, numerator, denominator) {
            return {
              type: "time",
              time: [ parseInt(numerator, 10), parseInt(denominator, 10) ]
            }
          })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("time signature");
        }
        return result0;
      }
      
      function parse_Jump() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        if (input.charCodeAt(pos) === 60) {
          result1 = "<";
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\"<\"");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (input.charCodeAt(pos) === 60) {
              result1 = "<";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"<\"");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 62) {
            result1 = ">";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\">\"");
            }
          }
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              if (input.charCodeAt(pos) === 62) {
                result1 = ">";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\">\"");
                }
              }
            }
          } else {
            result0 = null;
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, jump) {
            var m = {
              type: "jump",
              value: 0
            }
            if (~jump.indexOf("<")) m.value -= jump.length * 12
            else m.value += jump.length * 12
        
            return m
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("jump");
        }
        return result0;
      }
      
      function parse_Sustain() {
        var result0;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        if (input.charCodeAt(pos) === 91) {
          result0 = "[";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 93) {
            result0 = "]";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"]\"");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, sustain) {
            return {
              type: "sustain",
              value: ~sustain.indexOf("[") ? true : false
            }
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("sustain");
        }
        return result0;
      }
      
      function parse_Dynamics() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 40) {
          result0 = "(";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 112) {
            result2 = "p";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"p\"");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (input.charCodeAt(pos) === 112) {
                result2 = "p";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"p\"");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 === null) {
            if (input.substr(pos, 2) === "mp") {
              result1 = "mp";
              pos += 2;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"mp\"");
              }
            }
            if (result1 === null) {
              if (input.substr(pos, 2) === "mf") {
                result1 = "mf";
                pos += 2;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"mf\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos) === 102) {
                  result2 = "f";
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"f\"");
                  }
                }
                if (result2 !== null) {
                  result1 = [];
                  while (result2 !== null) {
                    result1.push(result2);
                    if (input.charCodeAt(pos) === 102) {
                      result2 = "f";
                      pos++;
                    } else {
                      result2 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"f\"");
                      }
                    }
                  }
                } else {
                  result1 = null;
                }
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 41) {
              result2 = ")";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\")\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, value) {
            return {
              type: "dynamics",
              value: typeof value === "string" ? value : value.join("")
            }
          })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("dynamics");
        }
        return result0;
      }
      
      function parse_Chord() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 40) {
          result0 = "(";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_Event();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_Event();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            if (input.substr(pos, 2) === " )") {
              result2 = " )";
              pos += 2;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\" )\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_Properties();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, events, props) {
            var m = {
              type: "chord",
              events: events
            }
            if (typeof props === "object") {
              Object.keys(props).forEach(function (k) {
                m[k] = props[k]
              })
            }
            return m
          })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("chord");
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
        var partCount = 0
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
